{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Scope This is a work in progress This repo is for an in-progress guidance doc Project scope Link to entry on PhUSE Hub . The initial scope of the project is guidance on the use of OSS, as well as collaboration on and creation of open-source projects. The primary aim is to provide guidance and link out to more information. If gaps are found, they will be noted for later follow-up and potential follow-on working groups: Using open source Relevance of different licence types Watchouts on governance models and assessing risk Landscape of tools available for vulnerability detection, validation/qualification/risk and enforcing licence policies, with particular reference to R-specific tools Building open source A summary and recommendation of licence types, with particular focus on permissive vs copyleft licences and the ramifications on code built on top of your project Relevance of licences present in dependencies, direct vs transitive dependencies, and the issues around compiling with dependencies that could occur in something like a public shiny app Landscape of places to place open-source projects and build collaborative communities Pros/benefits and cons/risks for companies to open source clinical reporting codebases Governance models for open-source projects with reference to their use today across clinical reporting collaborations Survey and summary of contract types present where intellectual property and copyright is shared between companies Tools available to understand the general health of projects (e.g. LFX tools), with specific reference to R extensions (e.g. metacran, riskmetric, openpharma) Examples of release models, particularly where projects have inter-project dependencies (e.g. tidyverse de-coupled release model vs bioconductor cohort release model) Tools for releasing and maintaining projects, with particular reference to tools for R packages Definitions CLA: Contributor License Agreement. Has a similar purpose to a DCO (Developer Certificate of Origin). CSR: Clinical Study Report eCRF: electronic Case Report Form GPL: GNU General Public License MIT: Common acronym for a license released by the Massachusetts Institute of Technology OS: Open-Source OSS: Open-Source Software IP: Intellectual Property","title":"Home"},{"location":"#scope","text":"This is a work in progress This repo is for an in-progress guidance doc","title":"Scope"},{"location":"#project-scope","text":"Link to entry on PhUSE Hub . The initial scope of the project is guidance on the use of OSS, as well as collaboration on and creation of open-source projects. The primary aim is to provide guidance and link out to more information. If gaps are found, they will be noted for later follow-up and potential follow-on working groups: Using open source Relevance of different licence types Watchouts on governance models and assessing risk Landscape of tools available for vulnerability detection, validation/qualification/risk and enforcing licence policies, with particular reference to R-specific tools Building open source A summary and recommendation of licence types, with particular focus on permissive vs copyleft licences and the ramifications on code built on top of your project Relevance of licences present in dependencies, direct vs transitive dependencies, and the issues around compiling with dependencies that could occur in something like a public shiny app Landscape of places to place open-source projects and build collaborative communities Pros/benefits and cons/risks for companies to open source clinical reporting codebases Governance models for open-source projects with reference to their use today across clinical reporting collaborations Survey and summary of contract types present where intellectual property and copyright is shared between companies Tools available to understand the general health of projects (e.g. LFX tools), with specific reference to R extensions (e.g. metacran, riskmetric, openpharma) Examples of release models, particularly where projects have inter-project dependencies (e.g. tidyverse de-coupled release model vs bioconductor cohort release model) Tools for releasing and maintaining projects, with particular reference to tools for R packages","title":"Project scope"},{"location":"#definitions","text":"CLA: Contributor License Agreement. Has a similar purpose to a DCO (Developer Certificate of Origin). CSR: Clinical Study Report eCRF: electronic Case Report Form GPL: GNU General Public License MIT: Common acronym for a license released by the Massachusetts Institute of Technology OS: Open-Source OSS: Open-Source Software IP: Intellectual Property","title":"Definitions"},{"location":"guidance/","text":"Guidance Content Content goes here","title":"Guidance"},{"location":"guidance/#guidance","text":"","title":"Guidance"},{"location":"guidance/#content","text":"Content goes here","title":"Content"},{"location":"links/","text":"Links sustainoss.org: Focus on making OSS sustainable, but still covers topics like licences chaoss.community: Working groups and tools focussed on OSS health linuxfoundation.org/resources/open-source-guides/ A comprehensive guide","title":"Links"},{"location":"links/#links","text":"sustainoss.org: Focus on making OSS sustainable, but still covers topics like licences chaoss.community: Working groups and tools focussed on OSS health linuxfoundation.org/resources/open-source-guides/ A comprehensive guide","title":"Links"},{"location":"meetings/","text":"Meetings F2F - 2022-09-20 Attendance James Black, Mike Stackhouse + 10 PHUSE members To be planned Action items Add content linking out to validation Culture of issues and PRs is quite foriegn, so shoud acknowledge that In terms of the value of OS, key points are: amplify efforts decrease review times quicker onboarding Kickoff - 2022-06-01 Attendance Anders Bilgrau Chintan Patel Estella Dong JZT (Jesper Zeth) Keaven Anderson Mike Stackhouse James Black Kick off meeting agenda: Intros Discuss plan for White Paper Notes: E2E-OS- Guidance Discussions on Github On github, we should vote on what information should be collected to help community with open source Thumbs up emoji if you agree a topic is in scope Thumbs down for out of scope Eyes emoji if you think topic needs discussing Condense long titles to keywords James to write up chosen topics in a document and store in Teams Timelines Bi weekly meetings Katie to send out doodle Projects typically reach end goal within a year Aim to produce White Paper within 6 months Next Steps: Pin down points to include in White Paper to manage scope Summarize discussion points to figure out outline of White Paper AOB: CSS Registration now open! Register before 1 July to benefit from discounted Early Bird rate Call for Posters now live! Submit an abstract before 10 June CSS Timeline Action items Katie to set up a doodle to find best time to meet bi-weekly Katie to add Sam Hume to the team Suggest or vote for topics in Github discussion","title":"Meetings"},{"location":"meetings/#meetings","text":"","title":"Meetings"},{"location":"meetings/#f2f-2022-09-20","text":"Attendance James Black, Mike Stackhouse + 10 PHUSE members To be planned Action items Add content linking out to validation Culture of issues and PRs is quite foriegn, so shoud acknowledge that In terms of the value of OS, key points are: amplify efforts decrease review times quicker onboarding","title":"F2F - 2022-09-20"},{"location":"meetings/#kickoff-2022-06-01","text":"Attendance Anders Bilgrau Chintan Patel Estella Dong JZT (Jesper Zeth) Keaven Anderson Mike Stackhouse James Black Kick off meeting agenda: Intros Discuss plan for White Paper Notes: E2E-OS- Guidance Discussions on Github On github, we should vote on what information should be collected to help community with open source Thumbs up emoji if you agree a topic is in scope Thumbs down for out of scope Eyes emoji if you think topic needs discussing Condense long titles to keywords James to write up chosen topics in a document and store in Teams Timelines Bi weekly meetings Katie to send out doodle Projects typically reach end goal within a year Aim to produce White Paper within 6 months Next Steps: Pin down points to include in White Paper to manage scope Summarize discussion points to figure out outline of White Paper AOB: CSS Registration now open! Register before 1 July to benefit from discounted Early Bird rate Call for Posters now live! Submit an abstract before 10 June CSS Timeline Action items Katie to set up a doodle to find best time to meet bi-weekly Katie to add Sam Hume to the team Suggest or vote for topics in Github discussion","title":"Kickoff - 2022-06-01"},{"location":"team/","text":"Team Anders Bilgrau, Novo nordisk Estella Dong, Bayer James Black, Roche (co-lead) Karl Brand, Bayer Keaven Anderson, Merck Michael Stackhouse, Atorus Research (co-lead) Richard Iannone, Posit","title":"WG Team"},{"location":"team/#team","text":"Anders Bilgrau, Novo nordisk Estella Dong, Bayer James Black, Roche (co-lead) Karl Brand, Bayer Keaven Anderson, Merck Michael Stackhouse, Atorus Research (co-lead) Richard Iannone, Posit","title":"Team"},{"location":"usingos/","text":"Using open-source What is the open-source health of the package? The communities that maintain and build open-source packages are diverse, and there are no set conventions on how they are maintained, resourced, and governed. Looking at metrics individually could be misleading \u2013 e.g., if a project has had no activity for 12 months, is that because the product has been abandoned/superseded, or could it be it had a small well-defined scope and is now stable and feature complete? The following section is a non-exhaustive discussion of topics relevant when using open-source data science projects. How can I see the activity of an open-source project? Many, but not all, open-source projects are on github.com or gitlab.com. On github.com, every repo contains a tab called Insights, from where you can see information on the people that contributed lines of code to a project. Of a particular interest might be the Contributor tab within Insights, an example screenshot of the dplyr R package contributor page is below. Some sites like openpharma.pharmaverse.org (specific to R and python packages in pharma) and OSS Insights (https://ossinsight.io/; powerful tool for any project on GitHub) also provide more specific insights into the community engagement behind each project hosted on github.com. How active are the community behind a project? Projects can go through lifecycles, so activity on a repo could have a variety of positive or negative implications. A project could have almost no active community in terms of recent contributions or response to issues, much like the R package survival , yet be a stable and critical package in R installations. Alternatively, a lack of activity could indicate a package is abandoned or deprecated. The community behind a project is also not limited to the people that contribute code. Users can also engage with a project via giving feedback via mechanisms like GitHub issues, emailing authors or engaging in discussions on GitHub issues. The following figure is an example of an issue page for the teal R package. The figure shows that teal has 24 open issues, and 266 closed issues. Small speech bubbles on the right of the figure show discussion have occurred on some issues. By looking through the issues, subjective impressions on community health can be made, for instance whether it\u2019s a few people giving feedback and one person developing, does it have stale issues no-one replies to, or does it have a lively community engaged in discussion and coordination. Packages can also be open sourced without having the place they develop the code exposed to the general public. An example is the randomForest package , which is an open sourced (GPL-2/3) R package where the source code of the releases is open sourced for use, but the package authors do not give users access to view the place where they develop code. This does not mean the quality of the code is inferior, but does indicate there is an additional barrier to engaging with the package development as the first step would be to contact the authors. Some things to consider when trying to establish the activity of a community are: How many individuals contributed to the project? What is the spread in contributions? What is the size of the \u2018core\u2019 group that contribute the majority of the code? What is the spread of commits \u2013 is it highly skewed to 1 or 2 people contributing? What is the recent and trends in commit activity? Is it currently active, formerly or is yet to become active? How many open and closed issues are there? If it\u2019s a low number, is that in line with the age and expected use of the project? Are there \u2018stale\u2019 open issues, where issues remain open for months or years? Are many of these stale issues with comments, suggesting some discussion, or absent of comments suggesting there is no feedback loop present between issues and the codebase? A thing to also look for is whether closed issues are resolved, as some projects use bots to automatically close stale issues. How do I find open-source projects? Numerous methods exist to find projects. Specific to R projects, the following sources exist: pharmaverse.org : opinionated/curated effort to provide end to end tools for clinical reporting. openpharma.pharmaverse.org : un-opinionated tracker of packages built by pharma for pharma use cases. It also and indexes and provides package metadata in a dashboard, and provides metadata to pharmaverse.org. rseek.org : Google filter for R relevant content. rinpharma.com/publication : The proceedings of the R/Pharma conference contain many relevant projects. What do I do if I see a project I could use, but it needs modification for my use case? Using R packages as an example, if your analysis plan requires creating a Kaplan Meier plot, you could implement this using open code you program using R base plotting functions. Alternatively, you could introduce a dependency on a package that provides that functionality as a parameterised function, like survminer , visR or tern . Occasionally an existing package may be missing a feature you want, as can be derived from the presence of at least 3 R packages with a Kaplan Meier plotting function. In such cases, you may need to extend, or start a new package. In the case of wanting to change default behaviour of package beyond what is possible in the current function, the user has several options \u2013 ranging from extending the package function to meet your needs, through to initiating a new package. It can be difficult to decide whether to extend an existing package, or whether it may be worth starting a new one, some resources to help understand how to contribute to a new package: A blog post by Jim Hester on contributing to the tidyverse: https://www.tidyverse.org/blog/2017/08/contributing/ Many packages have a CONTRIBUTING.md file, or mention in the README.md, how you can contribute. They may also be a dedicated tag for issues discussing new features (e.g. \u2018enhancements\u2019). What can help me understand the risks around using an open-source project? Risk can come from several domains including; Security, e.g. it has malicious code, Quality, the package has poor documentation and code is unreliable. Accuracy, the package does not correctly reference what it does, or implements it incorrectly. The R validation hub (pharmar.org) is a pan-pharma organisation, that aims to coordinate between pharma companies how the validation (and by extension risk) in R packages is undertaken and documented. Of particular relevance is the Case Studies repository, which contains examples from Roche, Merck and Novartis (as of July 2022) on how they approach validation and risk mitigation (https://github.com/pharmaR/case_studies). The R Validation Hub is also continuing work on the Risk Assessment App (https://github.com/pharmaR/risk_assessment), which aims to provide an application that will surface metrics to a user to help evaluate an R package. Roche has also open sourced a github-action called thevalidatoR, which is available on Github Marketplace (https://github.com/marketplace/actions/r-package-validation-report), which will generate a PDF with the unit testing results, as well as a traceability of matrix of documentation to tested functionality against a standard rocker R container. Licenses: using a project The licence of projects you depend on, particularly if you incorporate the source code into your compiled/shared product, can have drastic effects on what you can do with your project. It is always important to seek in-house counsel advice on your companies position on different license types. As a general guidance: There are permissive licenses that allow people to use a project in almost any way, through to copy-left licenses that prevent distributing and, in some cases, monetizing any project that incorporates the dependency into it\u2019s codebase. Two key resources to understand license types are https://choosealicense.com/ and https://opensource.org/licenses.","title":"Using OS"},{"location":"usingos/#using-open-source","text":"","title":"Using open-source"},{"location":"usingos/#what-is-the-open-source-health-of-the-package","text":"The communities that maintain and build open-source packages are diverse, and there are no set conventions on how they are maintained, resourced, and governed. Looking at metrics individually could be misleading \u2013 e.g., if a project has had no activity for 12 months, is that because the product has been abandoned/superseded, or could it be it had a small well-defined scope and is now stable and feature complete? The following section is a non-exhaustive discussion of topics relevant when using open-source data science projects.","title":"What is the open-source health of the package?"},{"location":"usingos/#how-can-i-see-the-activity-of-an-open-source-project","text":"Many, but not all, open-source projects are on github.com or gitlab.com. On github.com, every repo contains a tab called Insights, from where you can see information on the people that contributed lines of code to a project. Of a particular interest might be the Contributor tab within Insights, an example screenshot of the dplyr R package contributor page is below. Some sites like openpharma.pharmaverse.org (specific to R and python packages in pharma) and OSS Insights (https://ossinsight.io/; powerful tool for any project on GitHub) also provide more specific insights into the community engagement behind each project hosted on github.com.","title":"How can I see the activity of an open-source project?"},{"location":"usingos/#how-active-are-the-community-behind-a-project","text":"Projects can go through lifecycles, so activity on a repo could have a variety of positive or negative implications. A project could have almost no active community in terms of recent contributions or response to issues, much like the R package survival , yet be a stable and critical package in R installations. Alternatively, a lack of activity could indicate a package is abandoned or deprecated. The community behind a project is also not limited to the people that contribute code. Users can also engage with a project via giving feedback via mechanisms like GitHub issues, emailing authors or engaging in discussions on GitHub issues. The following figure is an example of an issue page for the teal R package. The figure shows that teal has 24 open issues, and 266 closed issues. Small speech bubbles on the right of the figure show discussion have occurred on some issues. By looking through the issues, subjective impressions on community health can be made, for instance whether it\u2019s a few people giving feedback and one person developing, does it have stale issues no-one replies to, or does it have a lively community engaged in discussion and coordination. Packages can also be open sourced without having the place they develop the code exposed to the general public. An example is the randomForest package , which is an open sourced (GPL-2/3) R package where the source code of the releases is open sourced for use, but the package authors do not give users access to view the place where they develop code. This does not mean the quality of the code is inferior, but does indicate there is an additional barrier to engaging with the package development as the first step would be to contact the authors. Some things to consider when trying to establish the activity of a community are: How many individuals contributed to the project? What is the spread in contributions? What is the size of the \u2018core\u2019 group that contribute the majority of the code? What is the spread of commits \u2013 is it highly skewed to 1 or 2 people contributing? What is the recent and trends in commit activity? Is it currently active, formerly or is yet to become active? How many open and closed issues are there? If it\u2019s a low number, is that in line with the age and expected use of the project? Are there \u2018stale\u2019 open issues, where issues remain open for months or years? Are many of these stale issues with comments, suggesting some discussion, or absent of comments suggesting there is no feedback loop present between issues and the codebase? A thing to also look for is whether closed issues are resolved, as some projects use bots to automatically close stale issues.","title":"How active are the community behind a project?"},{"location":"usingos/#how-do-i-find-open-source-projects","text":"Numerous methods exist to find projects. Specific to R projects, the following sources exist: pharmaverse.org : opinionated/curated effort to provide end to end tools for clinical reporting. openpharma.pharmaverse.org : un-opinionated tracker of packages built by pharma for pharma use cases. It also and indexes and provides package metadata in a dashboard, and provides metadata to pharmaverse.org. rseek.org : Google filter for R relevant content. rinpharma.com/publication : The proceedings of the R/Pharma conference contain many relevant projects.","title":"How do I find open-source projects?"},{"location":"usingos/#what-do-i-do-if-i-see-a-project-i-could-use-but-it-needs-modification-for-my-use-case","text":"Using R packages as an example, if your analysis plan requires creating a Kaplan Meier plot, you could implement this using open code you program using R base plotting functions. Alternatively, you could introduce a dependency on a package that provides that functionality as a parameterised function, like survminer , visR or tern . Occasionally an existing package may be missing a feature you want, as can be derived from the presence of at least 3 R packages with a Kaplan Meier plotting function. In such cases, you may need to extend, or start a new package. In the case of wanting to change default behaviour of package beyond what is possible in the current function, the user has several options \u2013 ranging from extending the package function to meet your needs, through to initiating a new package. It can be difficult to decide whether to extend an existing package, or whether it may be worth starting a new one, some resources to help understand how to contribute to a new package: A blog post by Jim Hester on contributing to the tidyverse: https://www.tidyverse.org/blog/2017/08/contributing/ Many packages have a CONTRIBUTING.md file, or mention in the README.md, how you can contribute. They may also be a dedicated tag for issues discussing new features (e.g. \u2018enhancements\u2019).","title":"What do I do if I see a project I could use, but it needs modification for my use case?"},{"location":"usingos/#what-can-help-me-understand-the-risks-around-using-an-open-source-project","text":"Risk can come from several domains including; Security, e.g. it has malicious code, Quality, the package has poor documentation and code is unreliable. Accuracy, the package does not correctly reference what it does, or implements it incorrectly. The R validation hub (pharmar.org) is a pan-pharma organisation, that aims to coordinate between pharma companies how the validation (and by extension risk) in R packages is undertaken and documented. Of particular relevance is the Case Studies repository, which contains examples from Roche, Merck and Novartis (as of July 2022) on how they approach validation and risk mitigation (https://github.com/pharmaR/case_studies). The R Validation Hub is also continuing work on the Risk Assessment App (https://github.com/pharmaR/risk_assessment), which aims to provide an application that will surface metrics to a user to help evaluate an R package. Roche has also open sourced a github-action called thevalidatoR, which is available on Github Marketplace (https://github.com/marketplace/actions/r-package-validation-report), which will generate a PDF with the unit testing results, as well as a traceability of matrix of documentation to tested functionality against a standard rocker R container.","title":"What can help me understand the risks around using an open-source project?"},{"location":"usingos/#licenses-using-a-project","text":"The licence of projects you depend on, particularly if you incorporate the source code into your compiled/shared product, can have drastic effects on what you can do with your project. It is always important to seek in-house counsel advice on your companies position on different license types. As a general guidance: There are permissive licenses that allow people to use a project in almost any way, through to copy-left licenses that prevent distributing and, in some cases, monetizing any project that incorporates the dependency into it\u2019s codebase. Two key resources to understand license types are https://choosealicense.com/ and https://opensource.org/licenses.","title":"Licenses: using a project"},{"location":"whyopensource/","text":"Open source: the what and why 'Open Source' software is software covered by a license that legally allows access and inspection of the software's source code. The many varieties of open-source licenses determine what you can then do with the software's source code, i.e. copy, modify, contribute or redistribute. Being able to view and then do something with source code wasn't always so. The term 'open source' has been in use at least since the 1990's 1 and the principles behind the term pre-date computer software (ref?). Thus, as long as there has been source code there have been efforts to make it 'open source'. As computing systems became widely adopted in universities and beyond, so to the value of freely accessing the source code of the software they ran became apparent. This effort was described as making software 'free' by Richard Stallman and formalised by the creation of the Free Software Foundation in 1985, including the creation of a legally enforceable licenses (the GNU Public License) to enshrine source code as 'free', that is, having the free-dom to access. Although this effort was the genesis of today's open-source communities, many people mistakenly understood 'free' to mean gratis, which was incorrect: most open-source licences allow the software to be sold for a fee 2 . As is the case, even if the main goal of open source is not creating software gratis, it so happens that the majority of open-source software is made available at no cost. Regardless of whether it is sold for a fee or not, the term 'open source' is the preferred term by most with respect to software with a license that allows access to the source code. Readers coming from the pharmaceutical industry probably perceive a contradiction here: how can software which is typically gratis to use, have any intrinsic value to either business or private users? Fair enough: this industry depends on capital investment which then depends on retaining the details of their drugs and production secret. The difference lies in the utility of (some) software, versus, in this example, a drug or therapy. Certain categories of software enable the creation of new value. Obvious examples being programming languages enabling creation of specialized applications which can support a specific business process, e.g. C, Python, R and many others. The ability to use and improve these open source languages freely accelerate in multiple dimensions the ability to create business value, e.g. specialized smart phone apps that offers a service to end-users. Imagine if you have an idea for a smart phone app, but before you can write a line of code, you need to buy a license to install that language. And after investing the time and money to access this language you realise it doesn't work as well as you need for your particular app. Or worse yet, it has a bug which renders it unfit for your purpose. Little chance you can resolve this quickly. Open-source software does not have these restrictions so you can focus all your resources on end-user value, not the tools needed for creation. The drugs and therapies manufactured by the pharmaceutical industry are the equivalent of a smart phone app: they provide end-user value. It\u2019s sound business logic to open source the tools used to create these products: remove the restrictions to creating drugs and enable each company to sharpen their focus on developing and delivering them. https://opensource.com/article/18/2/coining-term-open-source-software \u21a9 https://opensource.org/history \u21a9","title":"Why OS?"},{"location":"whyopensource/#open-source-the-what-and-why","text":"'Open Source' software is software covered by a license that legally allows access and inspection of the software's source code. The many varieties of open-source licenses determine what you can then do with the software's source code, i.e. copy, modify, contribute or redistribute. Being able to view and then do something with source code wasn't always so. The term 'open source' has been in use at least since the 1990's 1 and the principles behind the term pre-date computer software (ref?). Thus, as long as there has been source code there have been efforts to make it 'open source'. As computing systems became widely adopted in universities and beyond, so to the value of freely accessing the source code of the software they ran became apparent. This effort was described as making software 'free' by Richard Stallman and formalised by the creation of the Free Software Foundation in 1985, including the creation of a legally enforceable licenses (the GNU Public License) to enshrine source code as 'free', that is, having the free-dom to access. Although this effort was the genesis of today's open-source communities, many people mistakenly understood 'free' to mean gratis, which was incorrect: most open-source licences allow the software to be sold for a fee 2 . As is the case, even if the main goal of open source is not creating software gratis, it so happens that the majority of open-source software is made available at no cost. Regardless of whether it is sold for a fee or not, the term 'open source' is the preferred term by most with respect to software with a license that allows access to the source code. Readers coming from the pharmaceutical industry probably perceive a contradiction here: how can software which is typically gratis to use, have any intrinsic value to either business or private users? Fair enough: this industry depends on capital investment which then depends on retaining the details of their drugs and production secret. The difference lies in the utility of (some) software, versus, in this example, a drug or therapy. Certain categories of software enable the creation of new value. Obvious examples being programming languages enabling creation of specialized applications which can support a specific business process, e.g. C, Python, R and many others. The ability to use and improve these open source languages freely accelerate in multiple dimensions the ability to create business value, e.g. specialized smart phone apps that offers a service to end-users. Imagine if you have an idea for a smart phone app, but before you can write a line of code, you need to buy a license to install that language. And after investing the time and money to access this language you realise it doesn't work as well as you need for your particular app. Or worse yet, it has a bug which renders it unfit for your purpose. Little chance you can resolve this quickly. Open-source software does not have these restrictions so you can focus all your resources on end-user value, not the tools needed for creation. The drugs and therapies manufactured by the pharmaceutical industry are the equivalent of a smart phone app: they provide end-user value. It\u2019s sound business logic to open source the tools used to create these products: remove the restrictions to creating drugs and enable each company to sharpen their focus on developing and delivering them. https://opensource.com/article/18/2/coining-term-open-source-software \u21a9 https://opensource.org/history \u21a9","title":"Open source: the what and why"},{"location":"releasingOS/collab/","text":"Collaboration and governance models Open-sourcing a project allows others to leverage the code, but the ultimate goal is often that the open-source community adopts and helps extend and evolve the project. How projects govern this shared development is diverse. A commonality across all projects is that the repository, and it\u2019s main/production branch, will have some form of write access control, meaning a level of governance is present even if it\u2019s not formalised. What different governance models exist for open source? There is no definitive definition of open-source governance models. The following models are based on mapping Redhat (https://www.redhat.com/en/blog/understanding-open-source-governance-models and https://opensource.com/article/20/5/open-source-governance) and Linux Foundation (https://www.linuxfoundation.org/tools/open-source-reading-list/) notes to the packages relevant to clinical reporting. Single Entity This category refers to a project where a single entity is the final decision maker, regardless of whether that single entity is an individual, a company or other legal entity. This governance model is sometimes referred to as the \u201cprivately open source\u201d, \u201cfounder-leader\u201d, or \u201cbenevolent dictator\u201d model. The single entity controls which pull requests go to master and provides instruction on how new code should integrate in order to be accepted. Famous examples are Python until 2018 and Linux. Within pharmaverse.org, diffdf and many of the single company governed packages are an example of this governance model. Steering Group This category refers to a project where the ultimate decision-making capacity is shared between more than one entity. The structure of the group and manner in which the group makes decisions can vary. The name used to refer to the group can also vary, examples include \u201cgoverning board\u201d, \u201csteering group\u201d, and \u201ccouncil\u201d. A famous example includes the relatively oligarchical Python Steering Council from 2018, however many projects prefer simple democracies, or merely that a sufficient number of approvals from among the contributing entities are sufficient to approve acceptance to the production branch. Within pharmaverse.org, admiral is an example of this governance model. Do-ocracy This category refers to a project where access to the production branch is given out fairly freely, usually based on prior interactions with the primary contributors, or actual contributions via external pull requests. Trust is placed in the community to come to an agreement regarding acceptance to the production branch. This category is sometimes also referred to as a \u201cself-governed\u201d or \u201cnon-governed\u201d governance model. Within pharmaverse.org, visR is an example of this governance model. Foundation governed A legal body (e.g., non-profit) assumes control - an example organisation is the Linux Foundation which governs many projects, while in Pharma there are parallels to efforts like Transcelerate and OHDSI. There are no examples of this model within pharmaverse.org, but R/Pharma repositories do follow this model, where the registered non-profit Open Source in Pharma governs the github organisation. If two or more companies want to formally collaborate on an open-source project, what is the role of legal contracts between the companies when the code is open-source? Contributions to open-source code can come in many forms, and there is a great deal of diversity in projects relevant to clinical reporting. This is an emerging area for pharma companies, and so we will focus on promoting awareness, rather than giving firm guidelines. When do we need contracts? When initiating a project like an R package, or when another company is considering investing in collaboration to an existing project, there could be a discussion on having a legal framework layered on top of the collaboration. To help contextualise this, we will use four example projects. dplyr : The dplyr project is a ubiquitous in pharma, but is a generic data science package for data munging. The code owners are listed as an individual from a vendor, academia and a consultancy and it\u2019s released under a permissive license. This package is extensively consumed, and a core dependency in data related packages like admiral. This package is heavily depended on Pharma, but no legal agreement exists beyond the permissive licencing on the project. gt : There is a large spread of table generation packages in Pharma, but several Pharma companies (Roche and GSK \u2013 add links to their issues before pub) have publicly been exploring extensions that would allow the use of gt in TLG generation for CSRs. No legal agreement exists beyond the permissive licencing on the project. pkglite : Submitting code to the FDA requires collapsing the contents into text files with restrictive formats. pkglite exists to collapse and reconstitute an R package before and after the eCTD submission portal. pkglite uses a copy-left license, and copyright is owned by Merck. No legal agreement exists beyond the copy-left licencing on the project. admiral : admiral is an R package for creating ADaM datasets. The copyright is held between Roche and GSK, and it is permissively licensed. A contract exists between Roche and GSK on their collaboration model. Other Pharma\u2019s have contributed and offered to extend admiral without legal contracts in place on the original codebase. The examples above were intended to highlight that the majority of R packages used by Pharma companies are done so without legal contracts in place, beyond the license of the project, even when some collaboration takes place. It remains a discussion point though whether licenses are required, and the decision to create a license may become relevant if companies want to formally pool resources. It\u2019s important to note that with permissively license projects, it is possible that if two entities want to take a package in different directions, they are able to by forking the project. So, contributions to another entities package are not lost to the contributing company.","title":"Collaboration"},{"location":"releasingOS/collab/#collaboration-and-governance-models","text":"Open-sourcing a project allows others to leverage the code, but the ultimate goal is often that the open-source community adopts and helps extend and evolve the project. How projects govern this shared development is diverse. A commonality across all projects is that the repository, and it\u2019s main/production branch, will have some form of write access control, meaning a level of governance is present even if it\u2019s not formalised.","title":"Collaboration and governance models"},{"location":"releasingOS/collab/#what-different-governance-models-exist-for-open-source","text":"There is no definitive definition of open-source governance models. The following models are based on mapping Redhat (https://www.redhat.com/en/blog/understanding-open-source-governance-models and https://opensource.com/article/20/5/open-source-governance) and Linux Foundation (https://www.linuxfoundation.org/tools/open-source-reading-list/) notes to the packages relevant to clinical reporting.","title":"What different governance models exist for open source?"},{"location":"releasingOS/collab/#single-entity","text":"This category refers to a project where a single entity is the final decision maker, regardless of whether that single entity is an individual, a company or other legal entity. This governance model is sometimes referred to as the \u201cprivately open source\u201d, \u201cfounder-leader\u201d, or \u201cbenevolent dictator\u201d model. The single entity controls which pull requests go to master and provides instruction on how new code should integrate in order to be accepted. Famous examples are Python until 2018 and Linux. Within pharmaverse.org, diffdf and many of the single company governed packages are an example of this governance model.","title":"Single Entity"},{"location":"releasingOS/collab/#steering-group","text":"This category refers to a project where the ultimate decision-making capacity is shared between more than one entity. The structure of the group and manner in which the group makes decisions can vary. The name used to refer to the group can also vary, examples include \u201cgoverning board\u201d, \u201csteering group\u201d, and \u201ccouncil\u201d. A famous example includes the relatively oligarchical Python Steering Council from 2018, however many projects prefer simple democracies, or merely that a sufficient number of approvals from among the contributing entities are sufficient to approve acceptance to the production branch. Within pharmaverse.org, admiral is an example of this governance model.","title":"Steering Group"},{"location":"releasingOS/collab/#do-ocracy","text":"This category refers to a project where access to the production branch is given out fairly freely, usually based on prior interactions with the primary contributors, or actual contributions via external pull requests. Trust is placed in the community to come to an agreement regarding acceptance to the production branch. This category is sometimes also referred to as a \u201cself-governed\u201d or \u201cnon-governed\u201d governance model. Within pharmaverse.org, visR is an example of this governance model.","title":"Do-ocracy"},{"location":"releasingOS/collab/#foundation-governed","text":"A legal body (e.g., non-profit) assumes control - an example organisation is the Linux Foundation which governs many projects, while in Pharma there are parallels to efforts like Transcelerate and OHDSI. There are no examples of this model within pharmaverse.org, but R/Pharma repositories do follow this model, where the registered non-profit Open Source in Pharma governs the github organisation. If two or more companies want to formally collaborate on an open-source project, what is the role of legal contracts between the companies when the code is open-source? Contributions to open-source code can come in many forms, and there is a great deal of diversity in projects relevant to clinical reporting. This is an emerging area for pharma companies, and so we will focus on promoting awareness, rather than giving firm guidelines.","title":"Foundation governed"},{"location":"releasingOS/collab/#when-do-we-need-contracts","text":"When initiating a project like an R package, or when another company is considering investing in collaboration to an existing project, there could be a discussion on having a legal framework layered on top of the collaboration. To help contextualise this, we will use four example projects. dplyr : The dplyr project is a ubiquitous in pharma, but is a generic data science package for data munging. The code owners are listed as an individual from a vendor, academia and a consultancy and it\u2019s released under a permissive license. This package is extensively consumed, and a core dependency in data related packages like admiral. This package is heavily depended on Pharma, but no legal agreement exists beyond the permissive licencing on the project. gt : There is a large spread of table generation packages in Pharma, but several Pharma companies (Roche and GSK \u2013 add links to their issues before pub) have publicly been exploring extensions that would allow the use of gt in TLG generation for CSRs. No legal agreement exists beyond the permissive licencing on the project. pkglite : Submitting code to the FDA requires collapsing the contents into text files with restrictive formats. pkglite exists to collapse and reconstitute an R package before and after the eCTD submission portal. pkglite uses a copy-left license, and copyright is owned by Merck. No legal agreement exists beyond the copy-left licencing on the project. admiral : admiral is an R package for creating ADaM datasets. The copyright is held between Roche and GSK, and it is permissively licensed. A contract exists between Roche and GSK on their collaboration model. Other Pharma\u2019s have contributed and offered to extend admiral without legal contracts in place on the original codebase. The examples above were intended to highlight that the majority of R packages used by Pharma companies are done so without legal contracts in place, beyond the license of the project, even when some collaboration takes place. It remains a discussion point though whether licenses are required, and the decision to create a license may become relevant if companies want to formally pool resources. It\u2019s important to note that with permissively license projects, it is possible that if two entities want to take a package in different directions, they are able to by forking the project. So, contributions to another entities package are not lost to the contributing company.","title":"When do we need contracts?"},{"location":"releasingOS/ip/","text":"Intellectual property IP is often bucketed into pre-competitive and competitive IP (add this ref) , with post-competitive being a less established term we will define in this guidance. In clinical reporting, we place significant resources into the collection and presentation of information that was collected on our competitive IP in confirmatory clinical trials. In order to help separate this simpler case from pre-competitive \u2013 here we define as post-competitive a unique scenario of code that takes data generated as part of confirmatory studies (e.g. a Phase III trial) and creates an output. Post-competitive IP is where the benefits of open sourcing and encouraging between company collaboration can be more clearly differentiated from potential competitive advantage in developing new medicines. The following summarises the three types of IP: Pre-competitive : IP which is not a competitive advantage. This can be a complex definition, and will require guidance from company council. For instance, data standards may clearly be pre-competitive, but for anonymised data from historical trials, or an algorithm that generates risk scores for a certain outcome could provide a competitive advantage, or be defined as pre-competitive. Competitive IP : Clinical reporting relevant examples would be information on a new target, molecule or algorithm that provides an advantage in the creation of new medicines, or as a standalone data product that can be monetized. Post-competitive IP : Code that translates existing eCRF data into a CSR for submission.","title":"IP"},{"location":"releasingOS/ip/#intellectual-property","text":"IP is often bucketed into pre-competitive and competitive IP (add this ref) , with post-competitive being a less established term we will define in this guidance. In clinical reporting, we place significant resources into the collection and presentation of information that was collected on our competitive IP in confirmatory clinical trials. In order to help separate this simpler case from pre-competitive \u2013 here we define as post-competitive a unique scenario of code that takes data generated as part of confirmatory studies (e.g. a Phase III trial) and creates an output. Post-competitive IP is where the benefits of open sourcing and encouraging between company collaboration can be more clearly differentiated from potential competitive advantage in developing new medicines. The following summarises the three types of IP: Pre-competitive : IP which is not a competitive advantage. This can be a complex definition, and will require guidance from company council. For instance, data standards may clearly be pre-competitive, but for anonymised data from historical trials, or an algorithm that generates risk scores for a certain outcome could provide a competitive advantage, or be defined as pre-competitive. Competitive IP : Clinical reporting relevant examples would be information on a new target, molecule or algorithm that provides an advantage in the creation of new medicines, or as a standalone data product that can be monetized. Post-competitive IP : Code that translates existing eCRF data into a CSR for submission.","title":"Intellectual property"},{"location":"releasingOS/licenses/","text":"Licenses: releasing a project Ultimately, the license used for a project would require in-house counsel guidance on what license is preferred. All code open-sourced should have a license. The license has a standard location of being a text file called \u2018LICENSE\u2019 in the root of the project folder, or a markdown file called \u2018LICENSE.md\u2019. Of particular note is that R packages often have the license specified in the R specific location of the DESCRIPTION file, or may have it in both the standard and R specific locations (in rare cases these can also contradict so it is important to read both). Generally, permissive licenses are more common in clinical reporting, with the majority of pharmaverse R packages using an MIT (https://choosealicense.com/licenses/mit/) or Apache 2.0 (https://choosealicense.com/licenses/apache-2.0/) license. These licences allow distribution, commercial use and modification. One primary difference between MIT and Apache 2.0 is that the former has patent protection language and rules around trademark usage, and may be preferred in larger projects due to its focus on more explicitly spelling out the terms.","title":"Licences"},{"location":"releasingOS/licenses/#licenses-releasing-a-project","text":"Ultimately, the license used for a project would require in-house counsel guidance on what license is preferred. All code open-sourced should have a license. The license has a standard location of being a text file called \u2018LICENSE\u2019 in the root of the project folder, or a markdown file called \u2018LICENSE.md\u2019. Of particular note is that R packages often have the license specified in the R specific location of the DESCRIPTION file, or may have it in both the standard and R specific locations (in rare cases these can also contradict so it is important to read both). Generally, permissive licenses are more common in clinical reporting, with the majority of pharmaverse R packages using an MIT (https://choosealicense.com/licenses/mit/) or Apache 2.0 (https://choosealicense.com/licenses/apache-2.0/) license. These licences allow distribution, commercial use and modification. One primary difference between MIT and Apache 2.0 is that the former has patent protection language and rules around trademark usage, and may be preferred in larger projects due to its focus on more explicitly spelling out the terms.","title":"Licenses: releasing a project"},{"location":"releasingOS/prep/","text":"Preparing for release When is a good time to open source? As a general rule arising IP 1 , that is IP generated as part of the project, is simpler to handle than background IP that already exists. So, there is often a strong benefit to define what you want to do, decide if it would be open sourced, and if so, then start it in an open-source setting. This also helps to encourage defining a clear scope from day one, and encourage others to engage early rather than initiate additional projects that later may not be compatible without significant refactoring. Does it matter where you put a package on github.com? What are the differences between GitHub organizations that host packages like phuse-org, rinpharma, ropensci, openpharma, personal organisations, company owned organisations and organisations created to host a single project? Ultimately, the license chosen has an impact on how a package can be used, rather than the location the code is shared from. The location though can influence how a project is perceived. If it is hosted on a GitHub organisation with the name of a pharma company, relative to a pan-company organisation, it may imply that the project is \u2018Company A\u2019s\u2019 project rather than something they wish to co-create. As a general rule, the recommendation would be to place it in a company's organisation if you wish to remain control of the roadmap, but look to pan-company organisations if you wish to co-create and co-own the packages trajectory. Some examples are; Personal Github orgs diffdf (gowerc/diffdf) and survival (therneau/survival) are examples of two repositories used in pharma hosted in Github orgs belonging to a specific individual Project/Initiative Github orgs openpharma : While openpharma has a dashboard and metadata pipeline that is agnostic to where a package comes from, it also will house packages that do not want to be associated with a specific company or organisation pharmaverse : A sub-set of the pharmaverse clinical reporting repositories are also hosted on the pharmaverse Github org pharmaR : Houses repositories from the R Validation Hub working group Company Github orgs Many companies maintain Github orgs either at the company or department in a company level, like GSK-Biostatistics , Roche , Genentech , Novartis Organisation Github orgs phuse-org : PHUSE projects and working groups from PHUSE ropensci , ropenscilabs , ropensci-docs , etc: rOpenSci maintains several GitHub orgs, with rOpenSci housing mature R packages contributed by their staff, or peer-reviewed. What is important to look for when releasing a package that started life internally? If a package started its development on an internal git server, or a private repository on github.com, there could be some risk of exposing data either in issues, or historical commits. These could range from screen shots of patient data, tables or other business confidential information in issues, to passwords or files in the git commit history that were deleted but not purged. The recommendation is to always flatten the commit history, and wipe issues by starting a new git repository when open sourcing unless you are certain no information can be leaked. Could others claim we stole their IP? When discussing the open sourcing of a codebase, it is important to flag to internal counsel existing external projects, and the overlap of scope with the project you intend to release. It is possible that decisions made before open sourcing could become a risk after open sourcing. As an example of a plausible scenario; a team need to implement a new function. This function exists in another GPL-3 copy left licenced project. To add that project would introduce multiple dependencies that aren\u2019t used by that particular function so a member of the team decides to copy the function into the package. One year later, the package is open sourced with the licence infringing code. Such an occurrence could be lessened by a Contributor License Agreement (CLA; see https://github.com/contributor-assistant/github-action for an example of CLA automation). A CLA helps ensure that anyone contributing to a project acknowledges specific terms expected of contributions, like the contributions are novel code and the author will abide by the projects license terms. In the absence of a CLA it is important to ensure that all code within the package is original, and there is no culture of cannibalising external code and infringing on people\u2019s copyright within the development team even for internal projects. https://www.lawinsider.com/dictionary/arising-intellectual-property \u21a9","title":"Preparing"},{"location":"releasingOS/prep/#preparing-for-release","text":"","title":"Preparing for release"},{"location":"releasingOS/prep/#when-is-a-good-time-to-open-source","text":"As a general rule arising IP 1 , that is IP generated as part of the project, is simpler to handle than background IP that already exists. So, there is often a strong benefit to define what you want to do, decide if it would be open sourced, and if so, then start it in an open-source setting. This also helps to encourage defining a clear scope from day one, and encourage others to engage early rather than initiate additional projects that later may not be compatible without significant refactoring.","title":"When is a good time to open source?"},{"location":"releasingOS/prep/#does-it-matter-where-you-put-a-package-on-githubcom","text":"What are the differences between GitHub organizations that host packages like phuse-org, rinpharma, ropensci, openpharma, personal organisations, company owned organisations and organisations created to host a single project? Ultimately, the license chosen has an impact on how a package can be used, rather than the location the code is shared from. The location though can influence how a project is perceived. If it is hosted on a GitHub organisation with the name of a pharma company, relative to a pan-company organisation, it may imply that the project is \u2018Company A\u2019s\u2019 project rather than something they wish to co-create. As a general rule, the recommendation would be to place it in a company's organisation if you wish to remain control of the roadmap, but look to pan-company organisations if you wish to co-create and co-own the packages trajectory. Some examples are; Personal Github orgs diffdf (gowerc/diffdf) and survival (therneau/survival) are examples of two repositories used in pharma hosted in Github orgs belonging to a specific individual Project/Initiative Github orgs openpharma : While openpharma has a dashboard and metadata pipeline that is agnostic to where a package comes from, it also will house packages that do not want to be associated with a specific company or organisation pharmaverse : A sub-set of the pharmaverse clinical reporting repositories are also hosted on the pharmaverse Github org pharmaR : Houses repositories from the R Validation Hub working group Company Github orgs Many companies maintain Github orgs either at the company or department in a company level, like GSK-Biostatistics , Roche , Genentech , Novartis Organisation Github orgs phuse-org : PHUSE projects and working groups from PHUSE ropensci , ropenscilabs , ropensci-docs , etc: rOpenSci maintains several GitHub orgs, with rOpenSci housing mature R packages contributed by their staff, or peer-reviewed.","title":"Does it matter where you put a package on github.com?"},{"location":"releasingOS/prep/#what-is-important-to-look-for-when-releasing-a-package-that-started-life-internally","text":"If a package started its development on an internal git server, or a private repository on github.com, there could be some risk of exposing data either in issues, or historical commits. These could range from screen shots of patient data, tables or other business confidential information in issues, to passwords or files in the git commit history that were deleted but not purged. The recommendation is to always flatten the commit history, and wipe issues by starting a new git repository when open sourcing unless you are certain no information can be leaked.","title":"What is important to look for when releasing a package that started life internally?"},{"location":"releasingOS/prep/#could-others-claim-we-stole-their-ip","text":"When discussing the open sourcing of a codebase, it is important to flag to internal counsel existing external projects, and the overlap of scope with the project you intend to release. It is possible that decisions made before open sourcing could become a risk after open sourcing. As an example of a plausible scenario; a team need to implement a new function. This function exists in another GPL-3 copy left licenced project. To add that project would introduce multiple dependencies that aren\u2019t used by that particular function so a member of the team decides to copy the function into the package. One year later, the package is open sourced with the licence infringing code. Such an occurrence could be lessened by a Contributor License Agreement (CLA; see https://github.com/contributor-assistant/github-action for an example of CLA automation). A CLA helps ensure that anyone contributing to a project acknowledges specific terms expected of contributions, like the contributions are novel code and the author will abide by the projects license terms. In the absence of a CLA it is important to ensure that all code within the package is original, and there is no culture of cannibalising external code and infringing on people\u2019s copyright within the development team even for internal projects. https://www.lawinsider.com/dictionary/arising-intellectual-property \u21a9","title":"Could others claim we stole their IP?"},{"location":"releasingOS/reputation/","text":"Reputational risks and supporting others What are the expectations when I release a package? Are there risks to my company's brand having abandoned non-maintained packages? In this guidance it is suggested to open-source early, yet doing so could expose projects that are not ready for use, might be cancelled before reaching v1.0 or are never successfully adopted. The ratio of failed to successful projects is an important consideration, but a skew in that ratio being a negative indicator can be mitigated if repositories are clear on what stage of the product life cycle they are at (https://lifecycle.r-lib.org/) and make use of tools to inform users if a project has been deprecated (https://docs.github.com/en/repositories/archiving-a-github-repository/archiving-repositories), or are looking for new maintainers to take over the project.","title":"Reputational risks"},{"location":"releasingOS/reputation/#reputational-risks-and-supporting-others","text":"What are the expectations when I release a package? Are there risks to my company's brand having abandoned non-maintained packages? In this guidance it is suggested to open-source early, yet doing so could expose projects that are not ready for use, might be cancelled before reaching v1.0 or are never successfully adopted. The ratio of failed to successful projects is an important consideration, but a skew in that ratio being a negative indicator can be mitigated if repositories are clear on what stage of the product life cycle they are at (https://lifecycle.r-lib.org/) and make use of tools to inform users if a project has been deprecated (https://docs.github.com/en/repositories/archiving-a-github-repository/archiving-repositories), or are looking for new maintainers to take over the project.","title":"Reputational risks and supporting others"}]}